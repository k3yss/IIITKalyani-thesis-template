%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1
%%Indian Institute of Information Technology Kalyani
%% All rights are reserved.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%

\chapter[Introduction]{Introduction}
\label{chp1}
%\setcounter{minitocdepth}{1}
%\minitoc
\section{Introduction}
\label{chp1.1}
 Cloud storage services are currently very well-known and widely used. Many people and organizations use these services and outsource their data to cut costs. Some cloud storage companies, such as Amazon, Windows Azure, and Google Cloud, are well-known for swiftly providing Searchable Encryption (SE) services to attract more consumers. Cloud storage services \cite{8706605}, as shown in Fig.~\ref{Fig1(Chp1)}, are popular due to the numerous benefits that enable users to access their data from anywhere and at any time and obtain the information they require. Cloud storage services are frequently employed in various applications because of the benefits, such as data scalability, data accessibility, data shareability, and regular backup of large amounts of data. Many benefits of cloud storage services improve the quality of the user experience \cite{7324403}, and customers can remotely access data in the cloud using any device from anywhere and at any time instead of utilizing fixed workstations. A growing number of people and businesses are using cloud storage to lessen the significant burden of local storage and administration costs.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{figure}[!htb]
\begin{center}	\fbox{\includegraphics[width=14.5cm,height=8.2cm]{Figure/chp1/chap1_1}}	
\caption{General framework of cloud storage and secure data access}
\label{Fig1(Chp1)}
\end{center}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 \par Even if cloud storage services offer consumers a great deal of convenience, there are still significant problems and difficulties to be solved. Sensitive data that users upload to cloud storage is susceptible to hacking \cite{8038076, aloqaily2019intrusion} by criminal organizations, especially when it comes to essential infrastructure. The user's ability to properly govern the data was lost in the interim. By accessing the data, the cloud server and the unauthorized user can attempt to obtain the information included in the data, posing serious problems for the user's privacy and security. The user data is encrypted before being sent to the cloud to safeguard sensitive data. However, how to process and search on the encrypted data becomes an insurmountable difficulty when the user wants to look for linked files that include a specific term. Two approaches have been used in the past to solve this problem. One option is downloading all encrypted data locally before running a decryption query. This method wastes network overhead by requiring the download of numerous unnecessary files and incurs high processing costs for decryption. This approach is not practical in real life. Another extreme technique involves the user sending the secret key to the cloud server to decrypt the query; however, the cloud server cannot be trusted entirely. 

 \par To address the above-mentioned issues, Goldreich \cite{goldreich1996software} introduced the concept of a ciphertext search mechanism in 1996. However, this approach necessitates extensive communication between the client and server, rendering it impractical in real-world scenarios due to its inefficiency. In 2000, Song \cite{song2000practical} introduced an operational searchable encryption method, marking a significant milestone in advancing searchable encryption. SE is an emerging technology that empowers users to do targeted searches on encrypted data entrusted to a cloud server. From a cryptographic standpoint, SE technology has two primary types: Symmetric Searchable Encryption (SSE) and Public key Encryption with Keyword Search (PEKS). Several techniques \cite{curtmola2006searchable,kamara2013parallel,xu2021blockchain} related to SSE have been developed in the literature owing to their notable efficiency. Nevertheless, in SSE, users must exchange encryption keys securely. This limits its use in scenarios involving data sharing among several users. The PEKS scheme successfully addressed the challenge of securely distributing secret keys that arose from using the SSE protocol. In comparison to SSE, PEKS exhibits a broader range of potential applications. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{figure}[!htb]
	\centering
	\fbox{\includegraphics[width=14.7cm,height=8.0cm]{Figure/chp1/Chap1_2}}		
	\caption{Schematic flow diagram of PEKS scheme}
	\label{Fig2(Chp1)}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
\section{Background of PEKS Scheme}
\label{chp1.2}
 The SSE techniques may not always be feasible in open work environments. A PEKS scheme was introduced by Boneh et al. \cite{boneh2004public} to address key management in SSE. The framework of a PEKS scheme is illustrated in Fig.~\ref{Fig2(Chp1)}. In a PEKS system,  assume that the Data Owner, $DO$,  wants to share a sensitive file, $F$, with the Data Consumer, $DC$. At first, $DO$ selects some keywords \{$w_{j}: 1\leq j\leq n$\} from $F$ and encrypts them using the PEKS scheme using the public key $PK_{DC}$ of $DC$. Let \{$C_{w_{j}}$\} be the ciphertext of \{$w_{j}: 1\leq j\leq n$\}, and $DO$ uploads it in the Cloud Server, $CS$, along with the ciphertext of $F$, which is encrypted with possibly another encryption scheme. Now, $DC$ wants to search for a document containing the keyword $w_j$. For that purpose, $DC$ computes a trapdoor $T_{w_j}$ using his/her secret key $SK_{DC}$, and sends it to $CS$. Now, $CS$ executes the \textbf{Test} algorithm using $T_{w_j}$ and  $C_{w_{j}}$ to check whether $w_j$ is present in $C_{w_{j}}$. After finishing the search, $CS$ returns the search result to $DC$. During the search, $CS$ could not know the content of $F$ and $w_j$. In the following, we provide brief surveys on different PEKS schemes.
 \begin{itemize}
 \item \textbf{PKI-based PEKS (PKI-PEKS):} The majority of PEKS schemes rely on PKI and digital certificate management. Boneh et al. \cite{boneh2004public} introduced a novel Public Key Infrastructure (PKI)-based PEKS (PKI-PEKS) technique that utilizes a bilinear pairing map. This scheme enables users possessing a digital certificate to generate indexes using their corresponding public key. The potential exists for private key holders to generate trapdoors that can be utilized for query manipulation. Nevertheless, the establishment of a secure communication channel was deemed necessary. A public-private key pair is required for the PEKS system that Baek et al. \cite{baek2008public} have proposed because it does not rely on secure communication. Tang and Chen \cite{tang2009public} enhanced the technique by enabling attackers to acquire the correlation between the trapdoor and ciphertext.

 \par Park et al.'s scheme \cite{park2004public}, based on Decisional Bilinear Diffie-Hellman (DBDH) and Decisional Bilinear Diffie-Hellman Inversion (DBDHI) assumptions, requires several user-server connections. Huang and Li \cite{huang2017efficient} made multi-user public key encryption with conjunctive keyword search to save storage and user-server connections. Zhang and Zhang \cite{zhang2011efficient} refined the system by adding a subset keyword search, whereas Lv et al. \cite{lv2014expressive} proposed an expressive and secure PEKS technique that searches for disjunctive, conjunctive, and negation using hybrid order groups. Fang et al. \cite{fang2013public} developed a non-secure channel scheme that resists keyword guess, ciphertext, and chosen keyword attacks. Tang and Chen \cite{tang2009public} introduced an Offline Keyword Guessing Attack (OKGA)-resistant scheme. Hu and Liu \cite{hu2012enhanced} introduced a keyword decryption scheme. Shao and Yang \cite{shao2015security} made the scheme OKGA-resistant. Lu et al. \cite{lu2019efficient} addressed internal and external enemies, while Zhang and Zhang \cite{zhang2011efficient} added keyword verification. Huang and Li \cite{huang2017efficient} encrypt and authenticate keywords, while Wu et al.\cite{wu2018efficient} optimized file injection and OKGA.

 \item \textbf{IBE-based PEKS (IBE-PEKS):}~In 2001, Boneh and Franklin proposed the Identity-Based Encryption (IBE) scheme based on the concept of Identity-Based Cryptosystem (IBC) \cite{shamir1985identity}. The IBE/IBC schemes simplify the PKI-based certificate management issues. The public  key of a user can be an email address, IP address, phone number, or any other attribute. The Private Key Generator (PKG)/Key Generation Center (KGC), a trusted third-party, generates the user's identity-based private key. The PKG securely delivers the private key to the corresponding user. In an IBC/IBE based-PEKS (IBE-PKES) scheme, the sender encrypts the plaintext and transmits it to a cloud server while the recipient identifies themselves to PKG. With their private key, they generate a trapdoor and send it to the cloud server. The keyword search is performed by the cloud server. Crescenzo and Saraswat \cite{di2007public} introduced the first IBE-PEKS scheme without using bilinear paring maps. This scheme is designed based on the Jacobi symbols and the Quadratic Residual Problem (QRP). Using anonymous and blind identity encryption, Camenisch et al. \cite{camenisch2009blind} enhanced computations and communication of the IBE-PEKS scheme proposed in \cite{di2007public}. Abdalla et al. \cite{abdalla2005searchable} developed a general PEKS structure for anonymous and hierarchical IBE schemes. Khader \cite{khader2006public} proposed a robust IBE-PEKS scheme that included a structure for linked keyword search and a second structure lacking a secure communication channel for trapdoor conversion. Wu et al. \cite{wu2014efficient} proposed a new IBE-PEKS scheme resistant to OKGA and did not require a secure communication channel.

 \item \textbf{CL-PKC-Based PEKS (CL-PEKS):} Certificateless Public Key Cryptosystem (CL-PKC), proposed in 2003 by AlRiyami and Paterson \cite{al2003certificateless}, is a Public Key Cryptosystem (PKC). The CL-PKC scheme combines the merits of PKI and IBC/IBE paradigms. In CL-PKC, PKG computes the identity-based private key of the user. However, the full private key is generated by the user who makes use of the identity-based private key and the secret key chosen by him/her. Therefore, the PKG does not have access to the full private key of the user, and the private key escrow problem existing in IBC/IBE and the burden of PKI are abolished in the CL-PKC system. Yanguo et al. \cite{yanguo2014certificateless} proposed a CL-PKC-based PEKS (CL-PKES) scheme without a secure communication channel, resistant to OKGA and chosen keyword attack. Wu et al. \cite{wu2017security} showed it could not be secure against OKGA and malicious PKG attack. Zheng et al. \cite{zheng2015clks} added a keyword search to the scheme and provided its security in the standard model. Ma et al. \cite{7927473} developed a new CL-PEKS scheme for mobile healthcare systems, eliminating key storage and management problems. A CL-PEKS scheme for Industrial-Internet-of-Things (IIoT) was created in 2017 by He et al. \cite{8100946}. Another CL-PEKS scheme for IIoT was also provided by Ma et al. \cite{7927473} in 2018. But, Zhang et al. \cite {8964282} discovered that this scheme needs to satisfy trapdoor indistinguishability. A mediated CL-PEKS scheme without bilinear pairing was developed by Seo et al. \cite{6574849} in 2013 to address concerns about sensitive data sharing in public clouds. Girault's security Level-2  is achieved, where the cloud server is regarded as the PKG. A CL-PEKS scheme was developed by Wang et al. \cite{wang2016certificateless} to fend off the selective opening attack. Under the Computational Diffie-Hellman (CDH) assumption, it is Level-2 secure. According to Lu et al. \cite{8847411}, the adversary can impersonate the sender to encrypt the keyword and activate the Insider KGA (IKGA). They suggested a multi-recipient CL-PEKS technique that protects privacy and is not paired. However, the malicious server can quickly calculate the user's private key by entering the trapdoor. Recently, robust and efficient pairing-free CL-PEKS schemes are devised in \cite{9866679,10147303}.

 %\item \textbf{PEKS Supporting Proxy Re-Encryption (PEKS-PRE):} The PEKS-PRE encryption method, first proposed by Blaze et al.\cite{blaze1998divertible} in EUROCRYPT'98, involves a semi-trusted third-party converting ciphertext. The sender can delegate search rights to a delegate after re-encrypting the key without giving them their private key. This system allows for searching encrypted data without decrypting it, with the server acting as a proxy to convert encrypted data back into encrypted text. The sender provides data for the receiver to search. Shao \cite{shao2010proxy} introduced the PEKS-PRE scheme, combining PEKS and proxy encryption to delegate keyword searches to others. Wang et al.\cite{wang2012further} introduced a PEKS-PRE scheme, including conjunctive keyword search, proxy re-encryption, and bilinear pairing. Guo et al.\cite{guo2013verifiable} increased the security of the previous scheme with a new proxy re-encryption. Yang and Ma \cite{7360175} introduced a PEKS-RE scheme for electronic health record systems, allowing partial access to other users for a limited time. Yang et al. \cite{yang2017semantic} introduced a new PEKS-RE encryption scheme that covers semantic keyword search capabilities and is resistant to quantum attacks. Shi et al.\cite{shi2014attribute} introduced construction schemes based on CP-ABE and KP-ABE, combining proxy re-encryption and attribute-based encryption. Chen et al.\cite{chen2018attribute} combined attribute keyword search with proxy re-encryption for fine-grained access control and data search functions.

 %\item \textbf{PEKS Based on Predicate Encryption (PEKS-PE):} Predicate encryption, which was first proposed by Katz et al.\cite{katz2008predicate} in 2008, is a new public key encryption method that enables users to search encrypted data with precise access control without knowing their private key. This method can conceal concealed attributes and shipments. The server executes a test algorithm to match a trapdoor with an encrypted index and returns the results to the receiver without revealing any additional information. Zhang and Lu \cite{zhang2014poster} developed a PEKS-PE scheme, which can search for disjunctive and conjunctive keywords. Kim et al.\cite{7399733} provided an efficient propositional encryption. Zhang et al.\cite{zhang2019secure} introduced a highly efficient propositional scheme, capable of searching semantic multikeywords. The scheme converts the query keyword set and semantic index into an attribute and prediction vector.
\end{itemize}
 

\section{Research Scopes}
 \label{chp1.3}The use of cloud computing is increasing day by day. An increasing amount of sensitive and private data is being kept on cloud servers due to the development of the client-server model in cloud computing \cite{mell2009draft, smith2009computing}. However, for security reasons, raw data can not be stored on a cloud server because it leads to the leak of sensitive and confidential data. Therefore, the owner kept the data encrypted on the cloud server to protect its privacy. However, searching for encrypted data using traditional data-searching techniques is impossible. Boneh et al. \cite{boneh2004public} first introduced the PKC-based encrypted data searching concept. After that, many PEKS schemes have been proposed, but most of the schemes can not fulfill security requirements, such as preventing keyword guessing, achieving forward security, etc. In this thesis, we have proposed three PEKS schemes for encrypted data search, medical data-sharing, and data-sharing in IIoT to fulfill the required security and design gap of the existing PEKS schemes. The scopes of the thesis are listed below:
\begin{itemize}
 \item Three parties are involved in a PEKS scheme: $DO$, $DC$, and $CS$. The data owner, $DO$, wants to share secret and confidential data with a data consumer, $DC$. The $DO$ stores the encrypted message and associates keywords in the cloud server, and $CS$ provides a data storage facility. Here, the $CS$ may not be fully trusted as $CS$ has the authority to run the test algorithm, so $CS$ can choose a keyword, create a ciphertext on it, and run the test algorithm after getting a trapdoor from $DC$. So, it is required to ensure that  $CS$ can not generate a ciphertext for a chosen keyword. Hence, it is required to ensure ciphertext and trapdoor indistinguishability. If an adversary gets the ciphertext and trapdoor, it must be ensured that they can not run the test algorithm.
 
 \item The PEKS scheme can be used to share sensitive medical data among doctors, researchers, insurance companies, or hospitals. After getting the medical report from a hospital, a patient stores the encrypted medical records along with the associated keyword in a cloud server. If the patient goes to another hospital, they can share their digital medical record from the previous hospital with the current hospital. Also, the patient can share the medical record with other users, such as researchers, insurance companies, etc. As medical records contain the data owner's sensitive data, the attacker can perform the keywords guessing attack. Hence, it is required to ensure ciphertext and trapdoor indistinguishability. It must be ensured that only authenticated users can access the medical records of a data owner.
 
 \item Nowadays, secure data-sharing is essential in IIoT networks. We designed a PEKS scheme, BCT-CL-PEMKS, for the IIoT environments. Most existing PEKS schemes for IIoT use a cloud server \cite{8100946,7927473}, and some existing work uses fog/edge computing concept \cite{9541032,8889428} to store the encrypted messages and associate keywords. As in the IIoT environment, real-time data is required, so uses of cloud servers increase the latency of data transmission, and the use of fog/edge computing requires more time to search the particular fog/edge nodes where data is stored. In the proposed BCT-CL-PEMKS scheme, fog computing concepts were used to reduce the latency of data communication compared to cloud computing, and using private blockchain reduces the time complexity while searching the fog node where required data is stored. Also, the proposed scheme is CCA2 secured and achieved Girault’s security level 1, 2, and 3.
\end{itemize}

\section{Objectives of the Thesis}
\label{chp1.4}As previously discussed, we found that most of the existing PEKS schemes had security and efficiency flaws. To overcome the comings, we proposed various PEKS schemes in this thesis. The objectives of this thesis are listed below: 
\begin{itemize}
 \item We developed a PKI-PEKS scheme that can secure email access from an email server containing an encrypted keyword. This scheme can prevent KGAs and has achieved ciphertext and trapdoor indistinguishability. It also supports designated testability and is secure channel-free. The provable security model of the proposed PKI-PEKS scheme is analyzed using ROM. The results were obtained by comparing the PKI-PEKS scheme with the existing PEKS schemes, showing that the proposed scheme is robust and efficient.
 
 \item We developed an IBE-PEKS scheme for secure data-sharing with keyword search among hospitals, patients, and caregivers. This scheme can prevent KGAs and has achieved ciphertext and trapdoor indistinguishability. It also supports designated testability and supports multiuser search. The computational security of the scheme is examined in ROM. The proposed scheme is also compared with the other related schemes.
 
 \item We developed a CL-PKC-based PEKS scheme that supports multiuser search. This scheme can be used in the IIoT environments for secure data-sharing with keyword search. This scheme can prevent KGAs and has achieved ciphertext and trapdoor indistinguishability. It also supports designated testability. This scheme is CCA-2 secure and has achieved Girlaut's security level-3. The security of the scheme is analyzed in ROM. The proposed scheme is compared with existing PEKS schemes to show its effectiveness.
\end{itemize}


\section{Contributions of the Thesis}
 \label{chp1.5}This thesis contributes to developing the PEKS schemes that can fill the gap in existing schemes. We designed three PEKS schemes for accessing email, secure medical data sharing, and secure data sharing in the IIoT environment. We describe the proposed PEKS schemes in three chapters. The summary of the contributions of this thesis is listed below:
\begin{itemize}
  \item \textbf{PKI-PEKS Scheme:}~We develop a provably secure PKI-PEKS scheme in ROM. This scheme may be used for secure email access from an email server containing a list of encrypted keywords. The proposed scheme can resist IKG/OKG attacks, and offer ciphertext and trapdoor indistinguishability properties. We use the data owner's private key during encryption to prevent IKG/OKG attacks. Using the data owner's public key in the verification phase ensures the resilience of IKG/OKG attacks. Finally, the proposed scheme has been tested on a real testbed, and the results show that it can be used in the cloud computing scenario to search for keywords on encrypted data. We considered 80, 112, 128, 192, and 256-bit security, estimated the computation, communication, and storage overheads of the PKI-PEKS scheme, and compared them with the existing PKI-PEKS schemes.

 \item \textbf{BCT-IMDS Scheme:}~We design a Blockchain-assisted Identity-based Medical Data-Sharing (BCT-IMDS) scheme to share EMRs among the cloud servers maintained at different hospitals. The BCT-IMDS scheme used private and consortium blockchains to share and access the EMRs of patients. All participating hospitals keep the encrypted keywords and verification index in the consortium blockchain. The BCT-IMDS scheme provides ciphertext and trapdoor indistinguishability and designated-server testability in ROM. We considered 80, 112, 128, 192, and 256-bit security, estimated the computation, communication, and storage overheads of the BCT-IMDS scheme, and compared them with the existing IBE-PEKS schemes.

 \item \textbf{BCT-CL-PEMKS Scheme:}~Various sensors are utilized to gather data for IIoT environments and stored in an adaptable and affordable cloud computing infrastructure. The cloud server performs data analytics intelligently using AI-enabled applications. IIoT data must be encrypted to protect privacy because it is kept on a cloud server, which is untrusted. Nevertheless, there is a difficulty with searching encrypted data, which may be resolved by using a PEKS method. Furthermore, most existing PEKS schemes are vulnerable to IKGA/OKGA. Recently, some CL-PEKS schemes have been proposed to circumvent certificate management issues, key escrow problems, and IKGA/OKGA. However, they are vulnerable to a malicious PKG/KGC attack as they do not satisfy Girault's security level-3 security. We proposed a Private Blockchain-assisted CL-PEKS with Multi-Keyword Search (BCT-CL-PEMKS) scheme in a fog-based IIoT environment. The BCT-CL-PEMKS scheme meets Girault's security level 1, 2, and 3. It used a private blockchain to manage all the fog nodes. The BCT-CL-PEMKS scheme provides ciphertext indistinguishability, trapdoor indistinguishability, and designated-server testability in ROM. We estimated the computation and communication overheads of BCT-CL-PEMKS and compared them with other CL-PEKS schemes for 80, 112, 128, 192, and 256-bit security levels.
\end{itemize}

\section{Organization of the Thesis}
\label{chp1.6}
 After a brief discussion of the research scope, objective and contribution of this thesis, this section demonstrates the organization of the thesis as follows:
 \begin{itemize}
 \item Chapter~\ref{chp1} provides the introduction of this thesis. The background of the PEKS scheme is given in Section \ref{chp1.2}. The scopes of this thesis are given in Section \ref{chp1.3}. The objective of this thesis is explained in Section \ref{chp1.4}. The contribution of this thesis is listed in Section \ref{chp1.5}. The structure of this thesis is given in Section \ref{chp1.6}. Section \ref{chp1.7} concludes the the chapter.
 
 \item Chapter~\ref{chp2} provides the in-depth literature review of the PEKS scheme. Section \ref{chp2.2} describes the various state-of-the-art PKI-PEKS schemes. Various PEKS schemes usable for medical data-sharing are described in Section \ref{chp2.3}. Section \ref{chp2.4} presents the various PEKS schemes applicable for IIoT environments. The required various security attributes are presented in Section \ref{chp2.5}. Section \ref{chp2.6} summarizes the the chapter.

 \item Chapter~\ref{chp3} provides the technical backgrounds needed to describe the various PEKS scheme proposed in this thesis. The concept of the groups $\mathbb{Z}_{p}$, and $\mathbb{Z}_{p}^{*}$ are presented in Section \ref{chp3.2}. In Section \ref{chp3.3}, the concept of elliptic curve cryptography is given. The concept of oneway hash function is described in Section \ref{chp3.4}. The computation hard problems and their assumptions are described in Section \ref{chp3.5}. The concept of the PKC is presented in Section \ref{chp3.6}. The attack models are described in Section \ref{chp3.7}. The concept of IBC/IBE is given in Section \ref{chp3.8}. The idea of CL-PKC  id explained in Section \ref{chp3.9}. The details of the ROM is described in Section \ref{chp3.10}. The description of blockchain and fog computing paradigms are described in Section \ref{chp3.11} and Section \ref{chp3.12}, respectively. Finally, this chapter is concluded in Section \ref{chp3.13}.

 \item Chapter~\ref{chp4} describes the framework of the PEKS Scheme for Data Outsourcing in Cloud Environments. We demonstrate the security model of a PEKS  scheme in Section~\ref{chp4.2}. Next, we describe the proposed PEKS scheme in Section~\ref{chp4.3}. In Section~\ref{chp4.4}, we prove its provable security in the CPA model. We give the experimental and comparison results with other existing PEKS schemes in Sections~\ref{chp4.5} and ~\ref{chp4.6}. Section~\ref{chp4.7} summarizes this chapter.

 \item Chapter~\ref{chp5} provides an Identity-based Medical Data Sharing Framework using Cloud-assisted Blockchain. The system model is described in Section \ref{chp5.3}. The security model of the BCT-IMDS framework is described in Section \ref{chp5.4}. The BCT-IMDS system is demonstrated in Section \ref{chp5.5}. The formal security analysis of the BCT-IMDS scheme is described in Section~\ref{chp5.6}. Section \ref{chp5.7} compares the BCT-IMDS scheme with other state-of-the-art PEKS schemes by conducting performance and simulation experiments. Section \ref{chp5.8} summarizes this chapter.
 
 \item Chapter~\ref{chp6} provides the framework for Blockchain-assisted Certificateless Public Key Encryption with Multi-keyword Search. The proposed system model is described in Section \ref{chp6.3}. The security model is described in Section \ref{chp6.4}. The proposed BCT-CL-PEMKS scheme is explained in Section \ref{chp6.5}. Section \ref{chp6.6} describes the provable security analysis of the BCT-CL-PEMKS scheme. Section \ref{chp6.7} compares the proposed BCT-CL-PEMKS scheme to other state-of-the-art PEKS schemes by undertaking performance and simulation experiments. Section \ref{chp6.8} summarizes this chapter.
 \item Chapter~\ref{chp7} summarizes this thesis and also provides some insightful observations and future directions.
  \end{itemize}

\section{Summary}
\label{chp1.7}
This chapter describes the background of various existing PEKS schemes and their effectiveness in real-life applications. This chapter also outlines this thesis's scope, objectives, and contributions and explains its organization.
\nopagebreak